# Exercise 2:
```{r}
# Load packages
library("readr") 
library("sf") 
library("dplyr")
library("ggplot2")
library("tmap")
library("zoo")
library("tidyr")
```
## Task 1: Import your data
```{r}
wildschwein_BE <- read_delim("wildschwein_BE_2056.csv")
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
# Note:
# - that this dataset is already converted to EPSG 2056
# - the coordinates are stored in the columns (E/N)
# - setting remove = FALSE preserves the original (E/N) columns, which come in handy later on
```

## Task 2: Getting an overview

Q: How many individuals were tracked?
```{r}
unique(wildschwein_BE$TierName)
```
A: 3 Individuas, Sabi, Rosa and Ruth


Q: For how long were the individual tracked? Are there gaps?
Q: Were all individuals tracked concurrently or sequentially?
```{r}
ggplot(wildschwein_BE, aes(DatetimeUTC, TierName)) +
  geom_point()
```
A: All three boars were tracked a couple of months. Sabi were tracked for the longest time (Sept. 2014 - Aug. 2015). But there is a long time where all three boars were tracked concurrently. There are no gaps.


Q: What is the temporal sampling interval between the locations?
```{r}
wildschwein_BE <- group_by(wildschwein_BE, TierID) # Group so that the time difference is not calculated between different animals.
wildschwein_BE <- mutate(wildschwein_BE, timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC))) # Create a new column (timelag) that is a function of existing variables. Here the time difference between two consecutive data points.
wildschwein_BE
ggplot(wildschwein_BE, aes(timelag/60)) +
  geom_histogram(binwidth = 1) +
  lims(x = c(0, 5000/60)) + 
  scale_y_log10()


wildschwein_BE |> 
  filter(DatetimeUTC > "2014-12-07" & DatetimeUTC < "2014-12-08") |> 
  ggplot(aes(DatetimeUTC, timelag, color = TierName)) +
  geom_point() +
  geom_line()
```
A: There are different temporal sampling intervals. They vary between a few minutes and over an hour. Most of the sampling intervals are around 15 minutes followed by 60 minutes. Looking at individual days, it can be seen that the sampling interval is greater during the day than at night. Probably because the wild boars are mostly asleep during the day and to save power at the receiver.

## Task 3: Deriving movement parameters I: Speed
```{r}
E1 <- wildschwein_BE$E[1]
E2 <- wildschwein_BE$E[2]
N1 <- wildschwein_BE$N[1]
N2 <- wildschwein_BE$N[2]
  
wildschwein_BE <- wildschwein_BE |> 
  group_by(TierName) |> 
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2))

wildschwein_BE <- wildschwein_BE |> 
  mutate(speed_ms = steplength_m / timelag)

hist(log10(wildschwein_BE$speed_ms), 100)
```

## Task 4: Cross-scale movement analysis

```{r}
caro <- read_delim("caro60.csv")
caro_3 <- caro %>%
 filter(row_number() %% 3 == 1)
caro_6 <- caro %>%
 filter(row_number() %% 6 == 1)
caro_9 <- caro %>%
 filter(row_number() %% 9 == 1)
```

### Calculate caro
```{r}
caro <- caro |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric((difftime(lead(DatetimeUTC), DatetimeUTC))*60)) |> #calculate timelag
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2)) |> # calculate steplength in m
  mutate(speed_ms = steplength_m / timelag) # calculate speed in m/s
```

### Calculate caro_3
```{r}
caro_3 <- caro_3 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric((difftime(lead(DatetimeUTC), DatetimeUTC))*60)) |> #calculate timelag
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2)) |> # calculate steplength in m
  mutate(speed_ms = steplength_m / timelag) |> # calculate speed in m/s
  mutate(TierName = "Caro_3")
```

### Calculate caro_6
```{r}
caro_6 <- caro_6 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric((difftime(lead(DatetimeUTC), DatetimeUTC))*60)) |> #calculate timelag
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2)) |> # calculate steplength in m
  mutate(speed_ms = steplength_m / timelag) |> # calculate speed in m/s 
  mutate(TierName = "Caro_6")
```

### Calculate caro_9
```{r}
caro_9 <- caro_9 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric((difftime(lead(DatetimeUTC), DatetimeUTC))*60)) |> #calculate timelag
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2)) |> # calculate steplength in m
  mutate(speed_ms = steplength_m / timelag) |> # calculate speed in m/s
  mutate(TierName = "Caro_9")
```

### Compare the speeds visually in a line plot 
```{r}
ggplot() +
  geom_line(caro, mapping = aes(DatetimeUTC, speed_ms, colour = TierName)) +
  geom_line(caro_3, mapping = aes(DatetimeUTC, speed_ms, colour = TierName)) +
  geom_line(caro_6, mapping = aes(DatetimeUTC, speed_ms, colour = TierName)) +
  geom_line(caro_9, mapping = aes(DatetimeUTC, speed_ms, colour = TierName)) +
  labs(title = "Comparing derived speed at different sampling intervals")
```
As the temporal granularity decreases, Caro's speed decreases (or is smoothed). Short rapid changes in velocity are not captured at higher granularity. As a result, important information can be lost. 

### Visualize the trajectories in a map 
```{r}
ggplot() +
  geom_path(caro, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro, mapping = aes(E, N, colour = TierName)) +
  geom_path(caro_3, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro_3, mapping = aes(E, N, colour = TierName)) +
  labs(title = "Comparing original- with 3 minutes-resampled data")
```

```{r}
ggplot() +
  geom_path(caro, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro, mapping = aes(E, N, colour = TierName)) +
  geom_path(caro_6, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro_6, mapping = aes(E, N, colour = TierName)) +
  labs(title = "Comparing original- with 6 minutes-resampled data")
```

```{r}
ggplot() +
  geom_path(caro, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro, mapping = aes(E, N, colour = TierName)) +
  geom_path(caro_9, mapping = aes(E, N, colour = TierName)) +
  geom_point(caro_9, mapping = aes(E, N, colour = TierName)) +
  labs(title = "Comparing original- with 9 minutes-resampled data")
```

## Task 5: Deriving movement parameters II: Rolling window functions
### Familiarise yourself with this function by working on some dummy data
```{r}
example <- rnorm(10)
rollmean(example, k = 3, fill = NA, align = "left")
rollmean(example, k = 4, fill = NA, align = "left")
```

### Now run rollmean on the speed variable of the subset (caro)
```{r}
caro$rm1 <- rollmean(caro$speed_ms, k = 1, fill = NA, align = "left")
caro$rm3 <- rollmean(caro$speed_ms, k = 3, fill = NA, align = "left")
caro$rm6 <- rollmean(caro$speed_ms, k = 6, fill = NA, align = "left")
caro$rm9 <- rollmean(caro$speed_ms, k = 9, fill = NA, align = "left")
```

```{r}
ggplot() + 
  geom_path(data=caro, aes(x = DatetimeUTC, y = rm1, color= "rm1"))+
  geom_path(data=caro, aes(x = DatetimeUTC, y = rm3, color= "rm3"))+
  geom_path(data=caro, aes(x = DatetimeUTC, y = rm6, color= "rm6"))+
  geom_path(data=caro, aes(x = DatetimeUTC, y = rm9, color= "rm9"))+
  theme_classic() +
  labs(x="Zeitpunkt",y="rollmean")
```

## Task 7: Explore your movement data
```{r}
posmo <- read_delim("data/posmo_data.csv", ",")
posmo <- posmo|> 
  drop_na(lon_x)

posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326)
posmo <- st_transform(posmo, 2056)

ggplot(posmo)+
  geom_sf()

tmap_mode("view")
tm_shape(posmo) +
  tm_dots(col = "transport_mode", size = 0.1) 
```

